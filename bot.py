import logging
import os
import qrcode
import sqlite3
import uuid

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ConversationHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes
)

# –≠—Ç–∞–ø—ã –¥–∏–∞–ª–æ–≥–∞
DESIGN, INTRO, PROPOSAL, TIMES = range(4)

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

# –£–∫–∞–∂–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π –ø—É–±–ª–∏—á–Ω—ã–π URL –≤–∞—à–µ–≥–æ –≤–µ–±-—Å–∞–π—Ç–∞:
PUBLIC_URL = "http://svety.uz"

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (—Ñ–∞–π–ª –ª–µ–∂–∏—Ç –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ)
DB_PATH = "app.db"

def create_table_if_not_exists():
    """–°–æ–∑–¥–∞—ë—Ç —Ç–∞–±–ª–∏—Ü—É invitations, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â—ë –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."""
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute('''
        CREATE TABLE IF NOT EXISTS invitations (
            id TEXT PRIMARY KEY,
            design TEXT,
            intro TEXT,
            proposal TEXT,
            times TEXT,
            chat_id TEXT
        )
    ''')
    conn.commit()
    conn.close()

def save_invitation(design, intro, proposal, times, chat_id):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –ë–î –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ID (UUID).
    times ‚Äî —ç—Ç–æ —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ (–≤–∞—Ä–∏–∞–Ω—Ç—ã –≤—Ä–µ–º–µ–Ω–∏).
    """
    unique_id = str(uuid.uuid4())  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute('''
        INSERT INTO invitations (id, design, intro, proposal, times, chat_id)
        VALUES (?, ?, ?, ?, ?, ?)
    ''', (unique_id, design, intro, proposal, "\n".join(times), str(chat_id)))
    conn.commit()
    conn.close()
    return unique_id

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    create_table_if_not_exists()

    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º –∫—Ä–∞—Å–∏–≤–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ —Å–≤–∏–¥–∞–Ω–∏–µ!\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –¥–∏–∑–∞–π–Ω –æ—Ç–∫—Ä—ã—Ç–∫–∏:"
    )
    keyboard = [
        [InlineKeyboardButton("üéÜ –≠–ª–µ–≥–∞–Ω—Ç–Ω–∞—è –Ω–æ—á—å", callback_data="design_elegant")],
        [InlineKeyboardButton("üåπ –†–æ–º–∞–Ω—Ç–∏–∫–∞", callback_data="design_romantic")],
        [InlineKeyboardButton("üé∂ –ú—É–∑—ã–∫–∞ –∏ –∫–∏–Ω–æ", callback_data="design_music")],
        [InlineKeyboardButton("üí° –ú–∏–Ω–∏–º–∞–ª–∏–∑–º", callback_data="design_minimal")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
        reply_markup=reply_markup
    )
    return DESIGN

async def design_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∏–∑–∞–π–Ω–∞"""
    query = update.callback_query
    await query.answer()
    design = query.data
    context.user_data["design"] = design
    await query.edit_message_text(
        text=f"–¢—ã –≤—ã–±—Ä–∞–ª –¥–∏–∑–∞–π–Ω: {design}.\n\n–í–≤–µ–¥–∏ –≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç (intro):"
    )
    return INTRO

async def get_intro(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
    intro_text = update.message.text
    context.user_data["intro"] = intro_text
    await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ —Å–∞–º–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ (proposal) –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏:")
    return PROPOSAL

async def get_proposal(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è"""
    proposal_text = update.message.text
    context.user_data["proposal"] = proposal_text
    await update.message.reply_text(
        "–•–æ—Ä–æ—à–æ! –£–∫–∞–∂–∏ 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ (–∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏), –Ω–∞–ø—Ä–∏–º–µ—Ä:\n\n"
        "üïó 19:00 | 21 —è–Ω–≤–∞—Ä—è\n"
        "üåô 20:30 | 22 —è–Ω–≤–∞—Ä—è\n"
        "‚òï 17:00 | 23 —è–Ω–≤–∞—Ä—è"
    )
    return TIMES

async def get_times(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–∏, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î,
    –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ—Ä–æ—Ç–∫–æ–π —Å—Å—ã–ª–∫–∏ (—Å ID –≤–º–µ—Å—Ç–æ –¥–ª–∏–Ω–Ω—ã—Ö GET-–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)
    –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ QR-–∫–æ–¥–∞.
    """
    times_text = update.message.text
    times_list = [line.strip() for line in times_text.splitlines() if line.strip()]

    design = context.user_data.get("design", "design_elegant")
    intro = context.user_data.get("intro", "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª(–∞) —á—Ç–æ-—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ–µ...")
    proposal = context.user_data.get("proposal", "–î–∞–≤–∞–π –ø—Ä–æ–≤–µ–¥—ë–º —ç—Ç–æ—Ç –≤–µ—á–µ—Ä –≤–º–µ—Å—Ç–µ!")
    chat_id = update.effective_chat.id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å—ë –≤ SQLite
    invite_id = save_invitation(design, intro, proposal, times_list, chat_id)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π URL
    invite_url = f"{PUBLIC_URL}/invite/{invite_id}"

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞
    img = qrcode.make(invite_url)
    img_path = "invite_qr.png"
    img.save(img_path)

    with open(img_path, "rb") as photo:
        await update.message.reply_photo(
            photo=photo,
            caption=(
                f"–û—Ç–ª–∏—á–Ω–æ! –ú–∏–Ω–∏-—Å–∞–π—Ç —Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ–º –≥–æ—Ç–æ–≤.\n\n"
                f"–í–æ—Ç —Ç–≤–æ—è —Å—Å—ã–ª–∫–∞: {invite_url}\n\n"
                f"–û—Ç–ø—Ä–∞–≤—å –µ—ë —Å–≤–æ–µ–π –≤–æ–∑–ª—é–±–ª–µ–Ω–Ω–æ–π!"
            )
        )

    # –£–¥–∞–ª—è–µ–º QR-–∫–æ–¥ (–µ—Å–ª–∏ –Ω–µ –Ω—É–∂–µ–Ω)
    os.remove(img_path)

    return ConversationHandler.END

def main():
    """–ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞"""
    BOT_TOKEN = "8046219766:AAGFsWXIFTEPe8aaTBimVyWm2au2f-uIYSs"

    application = ApplicationBuilder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            DESIGN: [CallbackQueryHandler(design_choice)],
            INTRO: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_intro)],
            PROPOSAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_proposal)],
            TIMES: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_times)]
        },
        fallbacks=[]
    )

    application.add_handler(conv_handler)
    application.run_polling()

if __name__ == "__main__":
    main()
